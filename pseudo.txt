BEGIN
  GENERATE INITIAL POPULATION;
  DEFINE CONSTANT OF APPLICABLE_FITNESS_SCORE;
  DEFINE CONSTANT OF SELECTION_COUNTER
  COMPUTE FITNESS OF EACH INDIVIDUAL;
  SORT ALL INDIVIDUAL ACCORDING TO THEIR FITNESS SCORE
  REPEAT
      SELECT PARENT WITH HIGHER FITNESS SCORE
      SELECT PARENT WITH MEDIUM FITNESS SCORE
      MAKE_ONE_POINT_CROSSOVER 
      MAKE_BIT_FLIP_MUTATION
      COMPUTE FITNESS OF OFFSPRING;
      INSERT OFFSPRING IN NEW GENERATION
      SORT PARENTS ACCORDING TO THEIR FITNESS SCORE
      REMOVE FIRST PARENT FROM POPULATION # WEAKEST PARENT
  UNTIL FITNESS SCORE OF BEST PARENT IS HIGHER OR EQUAL TO APPLICABLE_FITNESS_SCORE OR SELECTION_COUNTER IS REACHED
END

BEGIN MAKE_ONE_POINT_CROSSOVER(PARENT_1, PARENT_2)
  GET FIRST HALF OF PARENT_1 GENES
  GET SECOND HALF OF PARENT_2 GENES
  INSERT SECOND HALF FROM PARENT_2 OF GENES TO PARENT_1
  INSERT FIRST HALF FROM PARENT_1 OF GENES TO PARENT_2
END

BEGIN MAKE_MULTIPOINT_CROSSOVER(PARENT_1, PARENT_2)
  GENERATE RANDOM SUBSET OF SIZE PARENT_1 AND PARENT_2
  SAVE GENES FROM SUBSET OF PARENT_1
  SAVE GENES FROM SUBSET OF PARENT_2
  INSERT SAVED GENES OF PARENT_2 TO PARENT_1
  INSERT SAVED GENES OF PARENT_1 TO PARENT_2
END

BEGIN MAKE_UNIFORM_CROSSOVER(PARENT_1, PARENT_2)
  FOR LENGTH OF PARENT_1 AND PARENT_2
    IF RANDOM_BOOLEAN == TRUE
      SWAP GENE OF PARENT_1 AND PARENT_2 IN CURRENT INDEX
    END
  END
END

BEGIN MAKE_BIT_FLIP_MUTATION()
  Ð¡HOSE GENE AND INVERSE IT TO OPPOSITE VALUE
END

BEGIN MAKE_RANDOM_RESETTING_MUTATION()
  CHOSE GENE AND INVERSE IT TO ANY PERMISSIBLE VALUE
END

BEGIN MAKE_SWAP_MUTATION()
  CHOSE 2 GENES AND SWAP THEM
END

BEGIN SCRAMBLE_MUTATION()
  SELECT SUBSET OF GENES AND RANDOMLY SHUFFLE THEM
END

BEGIN INVERSION_MUTATION()
  SELECT SUBSET OF GENES AND INVERT IT
END
